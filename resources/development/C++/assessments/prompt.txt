Prompt:
Act√∫a como un profesor experto en programaci√≥n en C++ y genera un programa completo que sirva como ejercicio o evaluaci√≥n pr√°ctica.
El programa debe desarrollarse √∫nicamente con los temas vistos hasta la Semana 7 del curso, sin utilizar conceptos avanzados como manejo de archivos, memoria din√°mica, herencia, plantillas ni polimorfismo.
‚úÖ Temario permitido
Semana 1: Tipos de Datos Abstractos (TDA) y Clases
Conceptos de abstracci√≥n, encapsulamiento y definici√≥n de clases simples con atributos y m√©todos.
Semana 2: Arrays Unidimensionales (Vectores)
Declaraci√≥n, inicializaci√≥n y acceso a elementos.
Operaciones b√°sicas: b√∫squeda, promedio, suma, etc.
Semana 3: Arrays Bidimensionales (Matrices)
Definici√≥n, acceso y operaciones simples (sumas, promedios).
Semana 4: Algoritmos de Actualizaci√≥n, B√∫squeda y Ordenaci√≥n
B√∫squeda secuencial y binaria.
Ordenaci√≥n por m√©todo de burbuja (explicado paso a paso).
Semana 5: Registros (struct) y Uniones
Definici√≥n y uso de estructuras, anidaci√≥n de estructuras y typedef.
Semana 6: Operaciones con Cadenas de Caracteres
Uso de funciones de la librer√≠a <cstring>: strlen(), strcpy(), strcat(), strstr().
Manipulaci√≥n b√°sica de cadenas tipo char[].
Semana 7: Uso de Punteros con Arreglos y Estructuras
Punteros y Arreglos: acceso, modificaci√≥n, suma, promedio, multiplicaci√≥n, inversi√≥n y comparaci√≥n de arreglos.
Punteros y Estructuras: acceso y modificaci√≥n de miembros, c√°lculo de promedios, paso de estructuras por puntero a funciones y manejo de arreglos de estructuras mediante punteros.
‚öôÔ∏è Requisitos del c√≥digo
El resultado debe ser un solo archivo C++ (.cpp) completamente funcional.
Debe estar bien documentado, con comentarios que expliquen claramente la l√≥gica y el prop√≥sito de cada parte del c√≥digo.
El programa debe usar estructuras de control b√°sicas (if, while, for) y funciones propias para modularizar el c√≥digo.
Solo se deben usar los temas incluidos en el temario permitido.
Debe respetar buenas pr√°cticas: nombres claros, validaciones completas, men√∫ funcional y ordenado.
üéØ Objetivo final
Generar directamente el c√≥digo completo y funcional en C++, bien comentado, que implemente el caso que se indique (por ejemplo, un sistema de gesti√≥n o administraci√≥n), aplicando exclusivamente los temas del temario permitido.
El resultado debe estar listo para compilar y servir como evidencia de aplicaci√≥n pr√°ctica de los conocimientos hasta la semana 7.
